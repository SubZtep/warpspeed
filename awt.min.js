const defaultRGB = {
  r: 255,
  g: 255,
  b: 255,
};

// detect

const isHex = color => color.charAt(0) === "#" && color.length === 7;
const isRGBA = color => color.startsWith("rgba");

// convert

// "rgba(44,44,44,1)"

const hex2rgb = color => ({
  r: parseInt(color.substr(1, 2), 16),
  g: parseInt(color.substr(3, 2), 16),
  b: parseInt(color.substr(5, 2), 16),
});

const rgba2rgb = color => {
  const [, r, g, b, a] = /^\s*rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/.exec(color);
  return {
    r,
    g,
    b,
  }
};

const toRGB = color => {
  if (isHex(color)) {
    return hex2rgb(color)
  }
  if (isRGBA(color)) {
    return rgba2rgb(color)
  }

  return defaultRGB
};

const randPos = () => (Math.random() - 0.5) * 1000;

class Star {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.size = 0.5 + Math.random();
  }
}

class WarpSpeed {
  config = {}
  stars = []

  constructor(canvas) {
    this.ctx = canvas.getContext("2d");
  }

  update(config) {
    //LiliCode: n vvvvvvvvvvvvvvvvvvj n n n n
    let resolutionUpdated = false;
    for (const [key, value] of Object.entries(config)) {
      if (this.config[key] !== value) {
        switch (key) {
          case "width":
          case "height":
          case "starScale":
            resolutionUpdated = true;
            break
          case "density":
            const starCount = Math.ceil(value * 1000);
            const diff = starCount - this.stars.length;
            if (diff > 0) {
              for (let i = 0; i < diff; i++) {
                const star = new Star(randPos(), randPos(), 1000 * Math.random());
                this.stars.push(star);
              }
            } else {
              this.stars.length = starCount;
            }
            break
          case "starColor":
            const color = toRGB(value);
            this.starR = color.r;
            this.starG = color.g;
            this.starB = color.b;
            break
        }
        this.config[key] = value;
      }
    }

    if (resolutionUpdated) {
      this.size = Math.max(this.config.width, this.config.height) / (10 / this.config.starScale);
      this.maxLineWidth = this.size / 30;
    }
  }

  draw(timeDelta) {
    this.move(timeDelta);

    const width = this.config.width;
    const height = this.config.height;
    this.size = Math.max(width, height) / (10 / this.config.starScale);

    const ctx = this.ctx;
    ctx.fillStyle = this.config.backgroundColor;
    ctx.fillRect(0, 0, width, height);

    for (const star of this.stars) {
      const xOnDisplay = star.x / star.z;
      const yOnDisplay = star.y / star.z;

      if (!this.config.warpEffect && (xOnDisplay < -0.5 || xOnDisplay > 0.5 || yOnDisplay < -0.5 || yOnDisplay > 0.5))
        continue

      const size = (star.size * this.size) / star.z;
      if (size < 0.3) continue //don't draw very small dots

      if (this.config.depthAlpha) {
        const alpha = (1000 - star.z) / 1000;
        ctx.fillStyle = `rgba(${this.starR}, ${this.starG}, ${this.starB}, ${alpha.toString()})`;
      } else {
        ctx.fillStyle = this.config.starColor;
      }

      if (this.config.warpEffect) {
        ctx.beginPath();
        const x2OnDisplay = star.x / (star.z + this.config.warpEffectLength * this.config.speed);
        const y2OnDisplay = star.y / (star.z + this.config.warpEffectLength * this.config.speed);

        if (x2OnDisplay < -0.5 || x2OnDisplay > 0.5 || y2OnDisplay < -0.5 || y2OnDisplay > 0.5) continue

        ctx.moveTo(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2);
        ctx.lineTo(width * (x2OnDisplay + 0.5) - size / 2, height * (y2OnDisplay + 0.5) - size / 2);
        ctx.lineWidth = Math.min(size, this.maxLineWidth);
        ctx.lineCap = this.config.useCircles ? "round" : "butt";
        ctx.strokeStyle = ctx.fillStyle;
        ctx.stroke();
      } else if (this.config.useCircles) {
        ctx.beginPath();
        ctx.arc(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2, size / 2, 0, 2 * Math.PI);
        ctx.fill();
      } else {
        ctx.fillRect(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2, size, size);
      }
    }
  }

  move(timeDelta) {
    const speed = this.config.speed * (timeDelta / 10);

    for (const star of this.stars) {
      star.z -= speed;
      while (star.z < 1) {
        star.z += 1000;
        star.x = (Math.random() - 0.5) * star.z;
        star.y = (Math.random() - 0.5) * star.z;
      }
    }
  }
}

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgY29uc3QgZGVmYXVsdFJHQiA9IHsKICAgIHI6IDI1NSwKICAgIGc6IDI1NSwKICAgIGI6IDI1NSwKICB9OwoKICAvLyBkZXRlY3QKCiAgY29uc3QgaXNIZXggPSBjb2xvciA9PiBjb2xvci5jaGFyQXQoMCkgPT09ICIjIiAmJiBjb2xvci5sZW5ndGggPT09IDc7CiAgY29uc3QgaXNSR0JBID0gY29sb3IgPT4gY29sb3Iuc3RhcnRzV2l0aCgicmdiYSIpOwoKICAvLyBjb252ZXJ0CgogIC8vICJyZ2JhKDQ0LDQ0LDQ0LDEpIgoKICBjb25zdCBoZXgycmdiID0gY29sb3IgPT4gKHsKICAgIHI6IHBhcnNlSW50KGNvbG9yLnN1YnN0cigxLCAyKSwgMTYpLAogICAgZzogcGFyc2VJbnQoY29sb3Iuc3Vic3RyKDMsIDIpLCAxNiksCiAgICBiOiBwYXJzZUludChjb2xvci5zdWJzdHIoNSwgMiksIDE2KSwKICB9KTsKCiAgY29uc3QgcmdiYTJyZ2IgPSBjb2xvciA9PiB7CiAgICBjb25zdCBbLCByLCBnLCBiLCBhXSA9IC9eXHMqcmdiYVxzKlwoXHMqKFxkKylccyosXHMqKFxkKylccyosXHMqKFxkKylccyosXHMqKFxkKylccypcKVxzKiQvLmV4ZWMoY29sb3IpOwogICAgcmV0dXJuIHsKICAgICAgciwKICAgICAgZywKICAgICAgYiwKICAgIH0KICB9OwoKICBjb25zdCB0b1JHQiA9IGNvbG9yID0+IHsKICAgIGlmIChpc0hleChjb2xvcikpIHsKICAgICAgcmV0dXJuIGhleDJyZ2IoY29sb3IpCiAgICB9CiAgICBpZiAoaXNSR0JBKGNvbG9yKSkgewogICAgICByZXR1cm4gcmdiYTJyZ2IoY29sb3IpCiAgICB9CgogICAgcmV0dXJuIGRlZmF1bHRSR0IKICB9OwoKICBjb25zdCByYW5kUG9zID0gKCkgPT4gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTAwMDsKCiAgY2xhc3MgU3RhciB7CiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7CiAgICAgIHRoaXMueCA9IHg7CiAgICAgIHRoaXMueSA9IHk7CiAgICAgIHRoaXMueiA9IHo7CiAgICAgIHRoaXMuc2l6ZSA9IDAuNSArIE1hdGgucmFuZG9tKCk7CiAgICB9CiAgfQoKICBjbGFzcyBXYXJwU3BlZWQgewogICAgY29uZmlnID0ge30KICAgIHN0YXJzID0gW10KCiAgICBjb25zdHJ1Y3RvcihjYW52YXMpIHsKICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgIH0KCiAgICB1cGRhdGUoY29uZmlnKSB7CiAgICAgIC8vTGlsaUNvZGU6IG4gdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2aiBuIG4gbiBuCiAgICAgIGxldCByZXNvbHV0aW9uVXBkYXRlZCA9IGZhbHNlOwogICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjb25maWcpKSB7CiAgICAgICAgaWYgKHRoaXMuY29uZmlnW2tleV0gIT09IHZhbHVlKSB7CiAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICBjYXNlICJ3aWR0aCI6CiAgICAgICAgICAgIGNhc2UgImhlaWdodCI6CiAgICAgICAgICAgIGNhc2UgInN0YXJTY2FsZSI6CiAgICAgICAgICAgICAgcmVzb2x1dGlvblVwZGF0ZWQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgImRlbnNpdHkiOgogICAgICAgICAgICAgIGNvbnN0IHN0YXJDb3VudCA9IE1hdGguY2VpbCh2YWx1ZSAqIDEwMDApOwogICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBzdGFyQ291bnQgLSB0aGlzLnN0YXJzLmxlbmd0aDsKICAgICAgICAgICAgICBpZiAoZGlmZiA+IDApIHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXIgPSBuZXcgU3RhcihyYW5kUG9zKCksIHJhbmRQb3MoKSwgMTAwMCAqIE1hdGgucmFuZG9tKCkpOwogICAgICAgICAgICAgICAgICB0aGlzLnN0YXJzLnB1c2goc3Rhcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RhcnMubGVuZ3RoID0gc3RhckNvdW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICJzdGFyQ29sb3IiOgogICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdG9SR0IodmFsdWUpOwogICAgICAgICAgICAgIHRoaXMuc3RhclIgPSBjb2xvci5yOwogICAgICAgICAgICAgIHRoaXMuc3RhckcgPSBjb2xvci5nOwogICAgICAgICAgICAgIHRoaXMuc3RhckIgPSBjb2xvci5iOwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmNvbmZpZ1trZXldID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAocmVzb2x1dGlvblVwZGF0ZWQpIHsKICAgICAgICB0aGlzLnNpemUgPSBNYXRoLm1heCh0aGlzLmNvbmZpZy53aWR0aCwgdGhpcy5jb25maWcuaGVpZ2h0KSAvICgxMCAvIHRoaXMuY29uZmlnLnN0YXJTY2FsZSk7CiAgICAgICAgdGhpcy5tYXhMaW5lV2lkdGggPSB0aGlzLnNpemUgLyAzMDsKICAgICAgfQogICAgfQoKICAgIGRyYXcodGltZURlbHRhKSB7CiAgICAgIHRoaXMubW92ZSh0aW1lRGVsdGEpOwoKICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmNvbmZpZy53aWR0aDsKICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5jb25maWcuaGVpZ2h0OwogICAgICB0aGlzLnNpemUgPSBNYXRoLm1heCh3aWR0aCwgaGVpZ2h0KSAvICgxMCAvIHRoaXMuY29uZmlnLnN0YXJTY2FsZSk7CgogICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDsKICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29uZmlnLmJhY2tncm91bmRDb2xvcjsKICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpOwoKICAgICAgZm9yIChjb25zdCBzdGFyIG9mIHRoaXMuc3RhcnMpIHsKICAgICAgICBjb25zdCB4T25EaXNwbGF5ID0gc3Rhci54IC8gc3Rhci56OwogICAgICAgIGNvbnN0IHlPbkRpc3BsYXkgPSBzdGFyLnkgLyBzdGFyLno7CgogICAgICAgIGlmICghdGhpcy5jb25maWcud2FycEVmZmVjdCAmJiAoeE9uRGlzcGxheSA8IC0wLjUgfHwgeE9uRGlzcGxheSA+IDAuNSB8fCB5T25EaXNwbGF5IDwgLTAuNSB8fCB5T25EaXNwbGF5ID4gMC41KSkKICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgIGNvbnN0IHNpemUgPSAoc3Rhci5zaXplICogdGhpcy5zaXplKSAvIHN0YXIuejsKICAgICAgICBpZiAoc2l6ZSA8IDAuMykgY29udGludWUgLy9kb24ndCBkcmF3IHZlcnkgc21hbGwgZG90cwoKICAgICAgICBpZiAodGhpcy5jb25maWcuZGVwdGhBbHBoYSkgewogICAgICAgICAgY29uc3QgYWxwaGEgPSAoMTAwMCAtIHN0YXIueikgLyAxMDAwOwogICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGByZ2JhKCR7dGhpcy5zdGFyUn0sICR7dGhpcy5zdGFyR30sICR7dGhpcy5zdGFyQn0sICR7YWxwaGEudG9TdHJpbmcoKX0pYDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29uZmlnLnN0YXJDb2xvcjsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLmNvbmZpZy53YXJwRWZmZWN0KSB7CiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7CiAgICAgICAgICBjb25zdCB4Mk9uRGlzcGxheSA9IHN0YXIueCAvIChzdGFyLnogKyB0aGlzLmNvbmZpZy53YXJwRWZmZWN0TGVuZ3RoICogdGhpcy5jb25maWcuc3BlZWQpOwogICAgICAgICAgY29uc3QgeTJPbkRpc3BsYXkgPSBzdGFyLnkgLyAoc3Rhci56ICsgdGhpcy5jb25maWcud2FycEVmZmVjdExlbmd0aCAqIHRoaXMuY29uZmlnLnNwZWVkKTsKCiAgICAgICAgICBpZiAoeDJPbkRpc3BsYXkgPCAtMC41IHx8IHgyT25EaXNwbGF5ID4gMC41IHx8IHkyT25EaXNwbGF5IDwgLTAuNSB8fCB5Mk9uRGlzcGxheSA+IDAuNSkgY29udGludWUKCiAgICAgICAgICBjdHgubW92ZVRvKHdpZHRoICogKHhPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIsIGhlaWdodCAqICh5T25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyKTsKICAgICAgICAgIGN0eC5saW5lVG8od2lkdGggKiAoeDJPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIsIGhlaWdodCAqICh5Mk9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMik7CiAgICAgICAgICBjdHgubGluZVdpZHRoID0gTWF0aC5taW4oc2l6ZSwgdGhpcy5tYXhMaW5lV2lkdGgpOwogICAgICAgICAgY3R4LmxpbmVDYXAgPSB0aGlzLmNvbmZpZy51c2VDaXJjbGVzID8gInJvdW5kIiA6ICJidXR0IjsKICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7CiAgICAgICAgICBjdHguc3Ryb2tlKCk7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy51c2VDaXJjbGVzKSB7CiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7CiAgICAgICAgICBjdHguYXJjKHdpZHRoICogKHhPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIsIGhlaWdodCAqICh5T25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyLCBzaXplIC8gMiwgMCwgMiAqIE1hdGguUEkpOwogICAgICAgICAgY3R4LmZpbGwoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3R4LmZpbGxSZWN0KHdpZHRoICogKHhPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIsIGhlaWdodCAqICh5T25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyLCBzaXplLCBzaXplKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBtb3ZlKHRpbWVEZWx0YSkgewogICAgICBjb25zdCBzcGVlZCA9IHRoaXMuY29uZmlnLnNwZWVkICogKHRpbWVEZWx0YSAvIDEwKTsKCiAgICAgIGZvciAoY29uc3Qgc3RhciBvZiB0aGlzLnN0YXJzKSB7CiAgICAgICAgc3Rhci56IC09IHNwZWVkOwogICAgICAgIHdoaWxlIChzdGFyLnogPCAxKSB7CiAgICAgICAgICBzdGFyLnogKz0gMTAwMDsKICAgICAgICAgIHN0YXIueCA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIHN0YXIuejsKICAgICAgICAgIHN0YXIueSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIHN0YXIuejsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGxldCB3YXJwc3BlZWQ7CiAgbGV0IGxhc3RUaW1lOwogIGxldCBwYXVzZWQ7CgogIGNvbnN0IHRpY2sgPSB0aW1lID0+IHsKICAgIGlmIChwYXVzZWQpIHJldHVybgogICAgd2FycHNwZWVkLmRyYXcobGFzdFRpbWUgPT09IG51bGwgPyAxIDogdGltZSAtIGxhc3RUaW1lKTsKICAgIGxhc3RUaW1lID0gdGltZTsKICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTsKICB9OwoKICBvbm1lc3NhZ2UgPSAoeyBkYXRhOiB7IGNhbnZhcywgY29uZmlnLCBwYXVzZSB9IH0pID0+IHsKICAgIGlmIChjYW52YXMgIT09IHVuZGVmaW5lZCkgewogICAgICB3YXJwc3BlZWQgPSBuZXcgV2FycFNwZWVkKGNhbnZhcyk7CiAgICB9CgogICAgaWYgKGNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHdhcnBzcGVlZC51cGRhdGUoY29uZmlnKTsKICAgIH0KCiAgICBpZiAocGF1c2UgIT09IHVuZGVmaW5lZCkgewogICAgICBwYXVzZWQgPSBwYXVzZTsKICAgICAgaWYgKCFwYXVzZWQpIHsKICAgICAgICBsYXN0VGltZSA9IG51bGw7CiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spOwogICAgICB9CiAgICB9CiAgfTsKCn0oKSk7Cgo=', 'data:application/json;charset=utf-8;base64,', false);
/* eslint-enable */

AFRAME.registerComponent("warpspeed", {
  schema: {
    width: {
      type: "number",
      default: 512,
    },
    height: {
      type: "number",
      default: 512,
    },
    speed: {
      type: "number",
      default: 0.7,
    },
    density: {
      type: "number",
      // default: 0.7, // min: >0
      default: 25.7, // min: >0
    },
    useCircles: {
      type: "boolean",
      default: true,
    },
    depthAlpha: {
      type: "boolean",
      default: true,
    },
    warpEffect: {
      type: "boolean",
      default: true,
    },
    warpEffectLength: {
      type: "number",
      default: 5, // min: 0
    },
    starScale: {
      type: "number",
      default: 3, // min: >0
    },
    backgroundColor: {
      type: "color",
      default: "#100a1a",
    },
    starColor: {
      type: "color",
      default: "#ffffff",
    },
    useWorker: {
      type: "boolean",
      default: false,
    },
  },

  update(oldData) {
    const reloadTexture =
      oldData.useWorker !== this.data.useWorker ||
      oldData.width !== this.data.width ||
      oldData.height !== this.data.height;

    if (reloadTexture) {
      if (oldData.useWorker !== undefined) {
        this.destroyCanvasMap();
      }
      this.createCanvasMap();
      this.initWarpspeed();
    }

    if (this.workerInUse()) {
      this.worker.postMessage({ config: this.data, pause: !this.isPlaying });
    } else {
      this.warpspeed.update(this.data);
    }
  },

  initWarpspeed() {
    this.el.removeState("worker");
    if (this.data.useWorker) {
      try {
        const offscreen = this.canvas.transferControlToOffscreen();
        this.worker = new WorkerFactory();
        this.worker.postMessage({ canvas: offscreen }, [offscreen]);
        this.el.addState("worker");
        return
      } catch (e) {
        console.error(e);
      }
    }
    this.warpspeed = new WarpSpeed(this.canvas);
  },

  createCanvasMap() {
    this.canvas = document.createElement("canvas");
    this.canvas.width = this.data.width;
    this.canvas.height = this.data.height;
    this.canvasMap = new THREE.Texture(this.canvas);
    this.el.getObject3D("mesh").material.map = this.canvasMap;
  },

  destroyCanvasMap() {
    if (this.workerInUse()) {
      this.worker.terminate();
      delete this.worker;
    } else {
      delete this.warpspeed;
    }
    this.canvasMap.dispose();
    delete this.canvas;
  },

  play() {
    if (this.workerInUse()) {
      this.worker.postMessage({ pause: false });
    }
  },

  pause() {
    if (this.workerInUse()) {
      this.worker.postMessage({ pause: true });
    }
  },

  workerInUse() {
    return this.el.is("worker")
  },

  tick(_time, timeDelta) {
    if (!this.workerInUse()) {
      this.warpspeed.draw(timeDelta);
    }
    this.canvasMap.needsUpdate = true;
  },
});
