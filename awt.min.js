const randPos = () => (Math.random() - 0.5) * 1000;
const hex2rgb = webColor =>
  webColor.charAt(0) === "#" && webColor.length === 7
    ? {
        r: parseInt(webColor.substr(1, 2), 16),
        g: parseInt(webColor.substr(3, 2), 16),
        b: parseInt(webColor.substr(5, 2), 16),
      }
    : {
        r: 255,
        g: 255,
        b: 255,
      };

class Star {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.size = 0.5 + Math.random();
  }
}

class WarpSpeed {
  config = {}
  stars = []

  constructor(canvas) {
    this.ctx = canvas.getContext("2d");
  }

  update(config) {
    //LiliCode: n vvvvvvvvvvvvvvvvvvj n n n n
    let resolutionUpdated = false;
    for (const [key, value] of Object.entries(config)) {
      if (this.config[key] !== value) {
        switch (key) {
          case "width":
          case "height":
          case "starScale":
            resolutionUpdated = true;
            break
          case "density":
            const starCount = Math.ceil(value * 1000);
            const diff = starCount - this.stars.length;
            if (diff > 0) {
              for (let i = 0; i < diff; i++) {
                const star = new Star(randPos(), randPos(), 1000 * Math.random());
                this.stars.push(star);
              }
            } else {
              this.stars.length = starCount;
            }
            break
          case "starColor":
            const color = hex2rgb(value);
            this.starR = color.r;
            this.starG = color.g;
            this.starB = color.b;
            break
        }
        this.config[key] = value;
      }
    }

    if (resolutionUpdated) {
      this.size = Math.max(this.config.width, this.config.height) / (10 / this.config.starScale);
      this.maxLineWidth = this.size / 30;
    }
  }

  draw(timeDelta) {
    this.move(timeDelta);

    const width = this.config.width;
    const height = this.config.height;
    this.size = Math.max(width, height) / (10 / this.config.starScale);

    const ctx = this.ctx;
    ctx.fillStyle = this.config.backgroundColor;
    ctx.fillRect(0, 0, width, height);

    for (const star of this.stars) {
      const xOnDisplay = star.x / star.z;
      const yOnDisplay = star.y / star.z;

      if (!this.config.warpEffect && (xOnDisplay < -0.5 || xOnDisplay > 0.5 || yOnDisplay < -0.5 || yOnDisplay > 0.5))
        continue

      const size = (star.size * this.size) / star.z;
      if (size < 0.3) continue //don't draw very small dots

      if (this.config.depthAlpha) {
        const alpha = (1000 - star.z) / 1000;
        ctx.fillStyle = `rgba(${this.starR}, ${this.starG}, ${this.starB}, ${alpha.toString()})`;
      } else {
        ctx.fillStyle = this.config.starColor;
      }

      if (this.config.warpEffect) {
        ctx.beginPath();
        const x2OnDisplay = star.x / (star.z + this.config.warpEffectLength * this.config.speed);
        const y2OnDisplay = star.y / (star.z + this.config.warpEffectLength * this.config.speed);

        if (x2OnDisplay < -0.5 || x2OnDisplay > 0.5 || y2OnDisplay < -0.5 || y2OnDisplay > 0.5) continue

        ctx.moveTo(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2);
        ctx.lineTo(width * (x2OnDisplay + 0.5) - size / 2, height * (y2OnDisplay + 0.5) - size / 2);
        ctx.lineWidth = Math.min(size, this.maxLineWidth);
        ctx.lineCap = this.config.useCircles ? "round" : "butt";
        ctx.strokeStyle = ctx.fillStyle;
        ctx.stroke();
      } else if (this.config.useCircles) {
        ctx.beginPath();
        ctx.arc(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2, size / 2, 0, 2 * Math.PI);
        ctx.fill();
      } else {
        ctx.fillRect(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2, size, size);
      }
    }
  }

  move(timeDelta) {
    const speed = this.config.speed * (timeDelta / 10);

    for (const star of this.stars) {
      star.z -= speed;
      while (star.z < 1) {
        star.z += 1000;
        star.x = (Math.random() - 0.5) * star.z;
        star.y = (Math.random() - 0.5) * star.z;
      }
    }
  }
}

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgY29uc3QgcmFuZFBvcyA9ICgpID0+IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwMDA7CiAgY29uc3QgaGV4MnJnYiA9IHdlYkNvbG9yID0+CiAgICB3ZWJDb2xvci5jaGFyQXQoMCkgPT09ICIjIiAmJiB3ZWJDb2xvci5sZW5ndGggPT09IDcKICAgICAgPyB7CiAgICAgICAgICByOiBwYXJzZUludCh3ZWJDb2xvci5zdWJzdHIoMSwgMiksIDE2KSwKICAgICAgICAgIGc6IHBhcnNlSW50KHdlYkNvbG9yLnN1YnN0cigzLCAyKSwgMTYpLAogICAgICAgICAgYjogcGFyc2VJbnQod2ViQ29sb3Iuc3Vic3RyKDUsIDIpLCAxNiksCiAgICAgICAgfQogICAgICA6IHsKICAgICAgICAgIHI6IDI1NSwKICAgICAgICAgIGc6IDI1NSwKICAgICAgICAgIGI6IDI1NSwKICAgICAgICB9OwoKICBjbGFzcyBTdGFyIHsKICAgIGNvbnN0cnVjdG9yKHgsIHksIHopIHsKICAgICAgdGhpcy54ID0geDsKICAgICAgdGhpcy55ID0geTsKICAgICAgdGhpcy56ID0gejsKICAgICAgdGhpcy5zaXplID0gMC41ICsgTWF0aC5yYW5kb20oKTsKICAgIH0KICB9CgogIGNsYXNzIFdhcnBTcGVlZCB7CiAgICBjb25maWcgPSB7fQogICAgc3RhcnMgPSBbXQoKICAgIGNvbnN0cnVjdG9yKGNhbnZhcykgewogICAgICB0aGlzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwogICAgfQoKICAgIHVwZGF0ZShjb25maWcpIHsKICAgICAgLy9MaWxpQ29kZTogbiB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZqIG4gbiBuIG4KICAgICAgbGV0IHJlc29sdXRpb25VcGRhdGVkID0gZmFsc2U7CiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbmZpZykpIHsKICAgICAgICBpZiAodGhpcy5jb25maWdba2V5XSAhPT0gdmFsdWUpIHsKICAgICAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgICAgIGNhc2UgIndpZHRoIjoKICAgICAgICAgICAgY2FzZSAiaGVpZ2h0IjoKICAgICAgICAgICAgY2FzZSAic3RhclNjYWxlIjoKICAgICAgICAgICAgICByZXNvbHV0aW9uVXBkYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAiZGVuc2l0eSI6CiAgICAgICAgICAgICAgY29uc3Qgc3RhckNvdW50ID0gTWF0aC5jZWlsKHZhbHVlICogMTAwMCk7CiAgICAgICAgICAgICAgY29uc3QgZGlmZiA9IHN0YXJDb3VudCAtIHRoaXMuc3RhcnMubGVuZ3RoOwogICAgICAgICAgICAgIGlmIChkaWZmID4gMCkgewogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaWZmOyBpKyspIHsKICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhciA9IG5ldyBTdGFyKHJhbmRQb3MoKSwgcmFuZFBvcygpLCAxMDAwICogTWF0aC5yYW5kb20oKSk7CiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnMucHVzaChzdGFyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5zdGFycy5sZW5ndGggPSBzdGFyQ291bnQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgInN0YXJDb2xvciI6CiAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBoZXgycmdiKHZhbHVlKTsKICAgICAgICAgICAgICB0aGlzLnN0YXJSID0gY29sb3IucjsKICAgICAgICAgICAgICB0aGlzLnN0YXJHID0gY29sb3IuZzsKICAgICAgICAgICAgICB0aGlzLnN0YXJCID0gY29sb3IuYjsKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgfQogICAgICAgICAgdGhpcy5jb25maWdba2V5XSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHJlc29sdXRpb25VcGRhdGVkKSB7CiAgICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgodGhpcy5jb25maWcud2lkdGgsIHRoaXMuY29uZmlnLmhlaWdodCkgLyAoMTAgLyB0aGlzLmNvbmZpZy5zdGFyU2NhbGUpOwogICAgICAgIHRoaXMubWF4TGluZVdpZHRoID0gdGhpcy5zaXplIC8gMzA7CiAgICAgIH0KICAgIH0KCiAgICBkcmF3KHRpbWVEZWx0YSkgewogICAgICB0aGlzLm1vdmUodGltZURlbHRhKTsKCiAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5jb25maWcud2lkdGg7CiAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY29uZmlnLmhlaWdodDsKICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgod2lkdGgsIGhlaWdodCkgLyAoMTAgLyB0aGlzLmNvbmZpZy5zdGFyU2NhbGUpOwoKICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7CiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kQ29sb3I7CiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKCiAgICAgIGZvciAoY29uc3Qgc3RhciBvZiB0aGlzLnN0YXJzKSB7CiAgICAgICAgY29uc3QgeE9uRGlzcGxheSA9IHN0YXIueCAvIHN0YXIuejsKICAgICAgICBjb25zdCB5T25EaXNwbGF5ID0gc3Rhci55IC8gc3Rhci56OwoKICAgICAgICBpZiAoIXRoaXMuY29uZmlnLndhcnBFZmZlY3QgJiYgKHhPbkRpc3BsYXkgPCAtMC41IHx8IHhPbkRpc3BsYXkgPiAwLjUgfHwgeU9uRGlzcGxheSA8IC0wLjUgfHwgeU9uRGlzcGxheSA+IDAuNSkpCiAgICAgICAgICBjb250aW51ZQoKICAgICAgICBjb25zdCBzaXplID0gKHN0YXIuc2l6ZSAqIHRoaXMuc2l6ZSkgLyBzdGFyLno7CiAgICAgICAgaWYgKHNpemUgPCAwLjMpIGNvbnRpbnVlIC8vZG9uJ3QgZHJhdyB2ZXJ5IHNtYWxsIGRvdHMKCiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmRlcHRoQWxwaGEpIHsKICAgICAgICAgIGNvbnN0IGFscGhhID0gKDEwMDAgLSBzdGFyLnopIC8gMTAwMDsKICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBgcmdiYSgke3RoaXMuc3RhclJ9LCAke3RoaXMuc3Rhckd9LCAke3RoaXMuc3RhckJ9LCAke2FscGhhLnRvU3RyaW5nKCl9KWA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbmZpZy5zdGFyQ29sb3I7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5jb25maWcud2FycEVmZmVjdCkgewogICAgICAgICAgY3R4LmJlZ2luUGF0aCgpOwogICAgICAgICAgY29uc3QgeDJPbkRpc3BsYXkgPSBzdGFyLnggLyAoc3Rhci56ICsgdGhpcy5jb25maWcud2FycEVmZmVjdExlbmd0aCAqIHRoaXMuY29uZmlnLnNwZWVkKTsKICAgICAgICAgIGNvbnN0IHkyT25EaXNwbGF5ID0gc3Rhci55IC8gKHN0YXIueiArIHRoaXMuY29uZmlnLndhcnBFZmZlY3RMZW5ndGggKiB0aGlzLmNvbmZpZy5zcGVlZCk7CgogICAgICAgICAgaWYgKHgyT25EaXNwbGF5IDwgLTAuNSB8fCB4Mk9uRGlzcGxheSA+IDAuNSB8fCB5Mk9uRGlzcGxheSA8IC0wLjUgfHwgeTJPbkRpc3BsYXkgPiAwLjUpIGNvbnRpbnVlCgogICAgICAgICAgY3R4Lm1vdmVUbyh3aWR0aCAqICh4T25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyLCBoZWlnaHQgKiAoeU9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMik7CiAgICAgICAgICBjdHgubGluZVRvKHdpZHRoICogKHgyT25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyLCBoZWlnaHQgKiAoeTJPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIpOwogICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IE1hdGgubWluKHNpemUsIHRoaXMubWF4TGluZVdpZHRoKTsKICAgICAgICAgIGN0eC5saW5lQ2FwID0gdGhpcy5jb25maWcudXNlQ2lyY2xlcyA/ICJyb3VuZCIgOiAiYnV0dCI7CiAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlOwogICAgICAgICAgY3R4LnN0cm9rZSgpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25maWcudXNlQ2lyY2xlcykgewogICAgICAgICAgY3R4LmJlZ2luUGF0aCgpOwogICAgICAgICAgY3R4LmFyYyh3aWR0aCAqICh4T25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyLCBoZWlnaHQgKiAoeU9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMiwgc2l6ZSAvIDIsIDAsIDIgKiBNYXRoLlBJKTsKICAgICAgICAgIGN0eC5maWxsKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN0eC5maWxsUmVjdCh3aWR0aCAqICh4T25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyLCBoZWlnaHQgKiAoeU9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMiwgc2l6ZSwgc2l6ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbW92ZSh0aW1lRGVsdGEpIHsKICAgICAgY29uc3Qgc3BlZWQgPSB0aGlzLmNvbmZpZy5zcGVlZCAqICh0aW1lRGVsdGEgLyAxMCk7CgogICAgICBmb3IgKGNvbnN0IHN0YXIgb2YgdGhpcy5zdGFycykgewogICAgICAgIHN0YXIueiAtPSBzcGVlZDsKICAgICAgICB3aGlsZSAoc3Rhci56IDwgMSkgewogICAgICAgICAgc3Rhci56ICs9IDEwMDA7CiAgICAgICAgICBzdGFyLnggPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiBzdGFyLno7CiAgICAgICAgICBzdGFyLnkgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiBzdGFyLno7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBsZXQgd2FycHNwZWVkOwogIGxldCBsYXN0VGltZTsKICBsZXQgcGF1c2VkOwoKICBjb25zdCB0aWNrID0gdGltZSA9PiB7CiAgICBpZiAocGF1c2VkKSByZXR1cm4KICAgIHdhcnBzcGVlZC5kcmF3KGxhc3RUaW1lID09PSBudWxsID8gMSA6IHRpbWUgLSBsYXN0VGltZSk7CiAgICBsYXN0VGltZSA9IHRpbWU7CiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljayk7CiAgfTsKCiAgb25tZXNzYWdlID0gKHsgZGF0YTogeyBjYW52YXMsIGNvbmZpZywgcGF1c2UgfSB9KSA9PiB7CiAgICBpZiAoY2FudmFzICE9PSB1bmRlZmluZWQpIHsKICAgICAgd2FycHNwZWVkID0gbmV3IFdhcnBTcGVlZChjYW52YXMpOwogICAgfQoKICAgIGlmIChjb25maWcgIT09IHVuZGVmaW5lZCkgewogICAgICB3YXJwc3BlZWQudXBkYXRlKGNvbmZpZyk7CiAgICB9CgogICAgaWYgKHBhdXNlICE9PSB1bmRlZmluZWQpIHsKICAgICAgcGF1c2VkID0gcGF1c2U7CiAgICAgIGlmICghcGF1c2VkKSB7CiAgICAgICAgbGFzdFRpbWUgPSBudWxsOwogICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTsKICAgICAgfQogICAgfQogIH07Cgp9KCkpOwoK', 'data:application/json;charset=utf-8;base64,', false);
/* eslint-enable */

AFRAME.registerComponent("warpspeed", {
  schema: {
    width: {
      type: "number",
      default: 512,
    },
    height: {
      type: "number",
      default: 512,
    },
    speed: {
      type: "number",
      default: 0.7,
    },
    density: {
      type: "number",
      // default: 0.7, // min: >0
      default: 25.7, // min: >0
    },
    useCircles: {
      type: "boolean",
      default: true,
    },
    depthAlpha: {
      type: "boolean",
      default: true,
    },
    warpEffect: {
      type: "boolean",
      default: true,
    },
    warpEffectLength: {
      type: "number",
      default: 5, // min: 0
    },
    starScale: {
      type: "number",
      default: 3, // min: >0
    },
    backgroundColor: {
      type: "color",
      default: "#100a1a",
    },
    starColor: {
      type: "color",
      default: "#ffffff",
    },
    useWorker: {
      type: "boolean",
      default: false,
    },
  },

  update(oldData) {
    if (
      oldData.useWorker !== this.data.useWorker ||
      oldData.width !== this.data.width ||
      oldData.height !== this.data.height
    ) {
      if (oldData.useWorker !== undefined) {
        if (oldData.useWorker) {
          this.worker.terminate();
          delete this.worker;
        } else {
          delete this.warpspeed;
        }
        this.canvasMap.dispose();
        delete this.canvas;
      }

      this.canvas = document.createElement("canvas");
      this.canvas.width = this.data.width;
      this.canvas.height = this.data.height;

      this.canvasMap = new THREE.Texture(this.canvas);
      this.el.getObject3D("mesh").material.map = this.canvasMap;

      if (this.data.useWorker) {
        const offscreen = this.canvas.transferControlToOffscreen();
        this.worker = new WorkerFactory();
        this.worker.postMessage({ canvas: offscreen }, [offscreen]);
      } else {
        this.warpspeed = new WarpSpeed(this.canvas);
      }
    }

    if (this.data.useWorker) {
      this.worker.postMessage({ config: this.data, pause: !this.isPlaying });
    } else {
      this.warpspeed.update(this.data);
    }
  },

  play() {
    if (this.data.useWorker) {
      this.worker.postMessage({ pause: false });
    }
  },

  pause() {
    if (this.data.useWorker) {
      this.worker.postMessage({ pause: true });
    }
  },

  tick(_time, timeDelta) {
    if (!this.data.useWorker) {
      this.warpspeed.draw(timeDelta);
    }
    this.canvasMap.needsUpdate = true;
  },
});
