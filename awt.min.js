class Star {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.size = 0.5 + Math.random();
  }
}

class WarpSpeed {

  config = {}
  stars = []

  starR = 255
  starG = 255
  starB = 255

  constructor(canvas) {
    this.canvas = canvas;
    this.ctx = this.canvas.getContext("2d");
  }

  update(config) {
    //LiliCode: n vvvvvvvvvvvvvvvvvvj n n n n
    for (const [key, value] of Object.entries(config)) {
      // console.log(key)
      if (this.config[key] !== value) {
        switch (key) {
          // case "backgroundColor":
          //   this.ctx.fillStyle = this.config.backgroundColor
          //   // this.ctx.fillRect(0, 0, width, height)
          //   this.ctx.fillRect(0, 0, 512, 512)
          // break
          case "speed":
          case "targetSpeed":
          case "speedAdjFactor":
            this.speed = key === "speed" ? value : this.config.speed || 0.7;
            break
          case "resolution":
            if (this.config.starScale !== undefined) {
              this.size = value / (10 / this.config.starScale);
              this.maxLineWidth = this.size / 30;
            }
            break
          case "starScale":
            if (this.config.resolution !== undefined) {
              this.size = this.config.resolution / (10 / value);
              this.maxLineWidth = this.size / 30;
            }
            break
          case "density":
            const len = Math.ceil(value * 1000);
            const diff = len - this.stars.length;
            if (diff > 0) {
              for (let i = 0; i < diff; i++) {
                this.stars.push(
                  new Star((Math.random() - 0.5) * 1000, (Math.random() - 0.5) * 1000, 1000 * Math.random())
                );
              }
            } else {
              this.stars.length = len;
            }
            break
          case "starColor":
            if (value.charAt(0) === "#" && value.length === 7) {
              this.starR = parseInt(value.substr(1, 2), 16);
              this.starG = parseInt(value.substr(3, 2), 16);
              this.starB = parseInt(value.substr(5, 2), 16);
            } else {
              continue
            }
            break
        }
        this.config[key] = value;
      }
    }
  }

  draw(timeDelta) {
    this.move(timeDelta);

    const width = this.config.resolution;
    const height = this.config.resolution;
    this.size = Math.max(width, height) / (10 / this.config.starScale);

    const ctx = this.ctx;
    ctx.fillStyle = this.config.backgroundColor;
    ctx.fillRect(0, 0, width, height);

    for (const s of this.stars) {
      const xOnDisplay = s.x / s.z;
      const yOnDisplay = s.y / s.z;

      if (!this.config.warpEffect && (xOnDisplay < -0.5 || xOnDisplay > 0.5 || yOnDisplay < -0.5 || yOnDisplay > 0.5))
        continue

      const size = (s.size * this.size) / s.z;
      if (size < 0.3) continue //don't draw very small dots

      if (this.config.depthAlpha) {
        const alpha = (1000 - s.z) / 1000;
        ctx.fillStyle = `rgba(${this.starR},${this.starG},${this.starB},${alpha.toString()})`;
      } else {
        ctx.fillStyle = `rgb(${this.starR},${this.starG},${this.starB})`; //rgb
      }

      if (this.config.warpEffect) {
        ctx.beginPath();
        const x2OnDisplay = s.x / (s.z + this.config.warpEffectLength * this.speed);
        const y2OnDisplay = s.y / (s.z + this.config.warpEffectLength * this.speed);

        if (x2OnDisplay < -0.5 || x2OnDisplay > 0.5 || y2OnDisplay < -0.5 || y2OnDisplay > 0.5) continue

        ctx.moveTo(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2);
        ctx.lineTo(width * (x2OnDisplay + 0.5) - size / 2, height * (y2OnDisplay + 0.5) - size / 2);
        ctx.lineWidth = size > this.maxLineWidth ? this.maxLineWidth : size;
        ctx.lineCap = this.config.useCircles ? "round" : "butt";
        ctx.strokeStyle = ctx.fillStyle;
        ctx.stroke();
      } else if (this.config.useCircles) {
        ctx.beginPath();
        ctx.arc(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2, size / 2, 0, 2 * Math.PI);
        ctx.fill();
      } else {
        ctx.fillRect(width * (xOnDisplay + 0.5) - size / 2, height * (yOnDisplay + 0.5) - size / 2, size, size);
      }
    }
  }

  move(timeDelta) {
    const speedMulF = timeDelta / 16.5;
    const speedAdjF = Math.pow(this.config.speedAdjFactor, 1 / speedMulF);
    this.speed = this.config.targetSpeed * speedAdjF + this.speed * (1 - speedAdjF);
    if (this.speed < 0) this.speed = 0;
    const speed = this.speed * speedMulF;

    for (const s of this.stars) {
      s.z -= speed;
      while (s.z < 1) {
        s.z += 1000;
        s.x = (Math.random() - 0.5) * s.z;
        s.y = (Math.random() - 0.5) * s.z;
      }
    }
  }
}

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgY2xhc3MgU3RhciB7CiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7CiAgICAgIHRoaXMueCA9IHg7CiAgICAgIHRoaXMueSA9IHk7CiAgICAgIHRoaXMueiA9IHo7CiAgICAgIHRoaXMuc2l6ZSA9IDAuNSArIE1hdGgucmFuZG9tKCk7CiAgICB9CiAgfQoKICBjbGFzcyBXYXJwU3BlZWQgewoKICAgIGNvbmZpZyA9IHt9CiAgICBzdGFycyA9IFtdCgogICAgc3RhclIgPSAyNTUKICAgIHN0YXJHID0gMjU1CiAgICBzdGFyQiA9IDI1NQoKICAgIGNvbnN0cnVjdG9yKGNhbnZhcykgewogICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhczsKICAgICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwogICAgfQoKICAgIHVwZGF0ZShjb25maWcpIHsKICAgICAgLy9MaWxpQ29kZTogbiB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZqIG4gbiBuIG4KICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnKSkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKGtleSkKICAgICAgICBpZiAodGhpcy5jb25maWdba2V5XSAhPT0gdmFsdWUpIHsKICAgICAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgICAgIC8vIGNhc2UgImJhY2tncm91bmRDb2xvciI6CiAgICAgICAgICAgIC8vICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yCiAgICAgICAgICAgIC8vICAgLy8gdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCkKICAgICAgICAgICAgLy8gICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCA1MTIsIDUxMikKICAgICAgICAgICAgLy8gYnJlYWsKICAgICAgICAgICAgY2FzZSAic3BlZWQiOgogICAgICAgICAgICBjYXNlICJ0YXJnZXRTcGVlZCI6CiAgICAgICAgICAgIGNhc2UgInNwZWVkQWRqRmFjdG9yIjoKICAgICAgICAgICAgICB0aGlzLnNwZWVkID0ga2V5ID09PSAic3BlZWQiID8gdmFsdWUgOiB0aGlzLmNvbmZpZy5zcGVlZCB8fCAwLjc7CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAicmVzb2x1dGlvbiI6CiAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnN0YXJTY2FsZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSB2YWx1ZSAvICgxMCAvIHRoaXMuY29uZmlnLnN0YXJTY2FsZSk7CiAgICAgICAgICAgICAgICB0aGlzLm1heExpbmVXaWR0aCA9IHRoaXMuc2l6ZSAvIDMwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICJzdGFyU2NhbGUiOgogICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5yZXNvbHV0aW9uICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuY29uZmlnLnJlc29sdXRpb24gLyAoMTAgLyB2YWx1ZSk7CiAgICAgICAgICAgICAgICB0aGlzLm1heExpbmVXaWR0aCA9IHRoaXMuc2l6ZSAvIDMwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICJkZW5zaXR5IjoKICAgICAgICAgICAgICBjb25zdCBsZW4gPSBNYXRoLmNlaWwodmFsdWUgKiAxMDAwKTsKICAgICAgICAgICAgICBjb25zdCBkaWZmID0gbGVuIC0gdGhpcy5zdGFycy5sZW5ndGg7CiAgICAgICAgICAgICAgaWYgKGRpZmYgPiAwKSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmY7IGkrKykgewogICAgICAgICAgICAgICAgICB0aGlzLnN0YXJzLnB1c2goCiAgICAgICAgICAgICAgICAgICAgbmV3IFN0YXIoKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTAwMCwgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTAwMCwgMTAwMCAqIE1hdGgucmFuZG9tKCkpCiAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RhcnMubGVuZ3RoID0gbGVuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICJzdGFyQ29sb3IiOgogICAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoMCkgPT09ICIjIiAmJiB2YWx1ZS5sZW5ndGggPT09IDcpIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RhclIgPSBwYXJzZUludCh2YWx1ZS5zdWJzdHIoMSwgMiksIDE2KTsKICAgICAgICAgICAgICAgIHRoaXMuc3RhckcgPSBwYXJzZUludCh2YWx1ZS5zdWJzdHIoMywgMiksIDE2KTsKICAgICAgICAgICAgICAgIHRoaXMuc3RhckIgPSBwYXJzZUludCh2YWx1ZS5zdWJzdHIoNSwgMiksIDE2KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuY29uZmlnW2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBkcmF3KHRpbWVEZWx0YSkgewogICAgICB0aGlzLm1vdmUodGltZURlbHRhKTsKCiAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5jb25maWcucmVzb2x1dGlvbjsKICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5jb25maWcucmVzb2x1dGlvbjsKICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgod2lkdGgsIGhlaWdodCkgLyAoMTAgLyB0aGlzLmNvbmZpZy5zdGFyU2NhbGUpOwoKICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7CiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kQ29sb3I7CiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKCiAgICAgIGZvciAoY29uc3QgcyBvZiB0aGlzLnN0YXJzKSB7CiAgICAgICAgY29uc3QgeE9uRGlzcGxheSA9IHMueCAvIHMuejsKICAgICAgICBjb25zdCB5T25EaXNwbGF5ID0gcy55IC8gcy56OwoKICAgICAgICBpZiAoIXRoaXMuY29uZmlnLndhcnBFZmZlY3QgJiYgKHhPbkRpc3BsYXkgPCAtMC41IHx8IHhPbkRpc3BsYXkgPiAwLjUgfHwgeU9uRGlzcGxheSA8IC0wLjUgfHwgeU9uRGlzcGxheSA+IDAuNSkpCiAgICAgICAgICBjb250aW51ZQoKICAgICAgICBjb25zdCBzaXplID0gKHMuc2l6ZSAqIHRoaXMuc2l6ZSkgLyBzLno7CiAgICAgICAgaWYgKHNpemUgPCAwLjMpIGNvbnRpbnVlIC8vZG9uJ3QgZHJhdyB2ZXJ5IHNtYWxsIGRvdHMKCiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmRlcHRoQWxwaGEpIHsKICAgICAgICAgIGNvbnN0IGFscGhhID0gKDEwMDAgLSBzLnopIC8gMTAwMDsKICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBgcmdiYSgke3RoaXMuc3RhclJ9LCR7dGhpcy5zdGFyR30sJHt0aGlzLnN0YXJCfSwke2FscGhhLnRvU3RyaW5nKCl9KWA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBgcmdiKCR7dGhpcy5zdGFyUn0sJHt0aGlzLnN0YXJHfSwke3RoaXMuc3RhckJ9KWA7IC8vcmdiCiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5jb25maWcud2FycEVmZmVjdCkgewogICAgICAgICAgY3R4LmJlZ2luUGF0aCgpOwogICAgICAgICAgY29uc3QgeDJPbkRpc3BsYXkgPSBzLnggLyAocy56ICsgdGhpcy5jb25maWcud2FycEVmZmVjdExlbmd0aCAqIHRoaXMuc3BlZWQpOwogICAgICAgICAgY29uc3QgeTJPbkRpc3BsYXkgPSBzLnkgLyAocy56ICsgdGhpcy5jb25maWcud2FycEVmZmVjdExlbmd0aCAqIHRoaXMuc3BlZWQpOwoKICAgICAgICAgIGlmICh4Mk9uRGlzcGxheSA8IC0wLjUgfHwgeDJPbkRpc3BsYXkgPiAwLjUgfHwgeTJPbkRpc3BsYXkgPCAtMC41IHx8IHkyT25EaXNwbGF5ID4gMC41KSBjb250aW51ZQoKICAgICAgICAgIGN0eC5tb3ZlVG8od2lkdGggKiAoeE9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMiwgaGVpZ2h0ICogKHlPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIpOwogICAgICAgICAgY3R4LmxpbmVUbyh3aWR0aCAqICh4Mk9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMiwgaGVpZ2h0ICogKHkyT25EaXNwbGF5ICsgMC41KSAtIHNpemUgLyAyKTsKICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzaXplID4gdGhpcy5tYXhMaW5lV2lkdGggPyB0aGlzLm1heExpbmVXaWR0aCA6IHNpemU7CiAgICAgICAgICBjdHgubGluZUNhcCA9IHRoaXMuY29uZmlnLnVzZUNpcmNsZXMgPyAicm91bmQiIDogImJ1dHQiOwogICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZTsKICAgICAgICAgIGN0eC5zdHJva2UoKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29uZmlnLnVzZUNpcmNsZXMpIHsKICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgICAgICAgIGN0eC5hcmMod2lkdGggKiAoeE9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMiwgaGVpZ2h0ICogKHlPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIsIHNpemUgLyAyLCAwLCAyICogTWF0aC5QSSk7CiAgICAgICAgICBjdHguZmlsbCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjdHguZmlsbFJlY3Qod2lkdGggKiAoeE9uRGlzcGxheSArIDAuNSkgLSBzaXplIC8gMiwgaGVpZ2h0ICogKHlPbkRpc3BsYXkgKyAwLjUpIC0gc2l6ZSAvIDIsIHNpemUsIHNpemUpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG1vdmUodGltZURlbHRhKSB7CiAgICAgIGNvbnN0IHNwZWVkTXVsRiA9IHRpbWVEZWx0YSAvIDE2LjU7CiAgICAgIGNvbnN0IHNwZWVkQWRqRiA9IE1hdGgucG93KHRoaXMuY29uZmlnLnNwZWVkQWRqRmFjdG9yLCAxIC8gc3BlZWRNdWxGKTsKICAgICAgdGhpcy5zcGVlZCA9IHRoaXMuY29uZmlnLnRhcmdldFNwZWVkICogc3BlZWRBZGpGICsgdGhpcy5zcGVlZCAqICgxIC0gc3BlZWRBZGpGKTsKICAgICAgaWYgKHRoaXMuc3BlZWQgPCAwKSB0aGlzLnNwZWVkID0gMDsKICAgICAgY29uc3Qgc3BlZWQgPSB0aGlzLnNwZWVkICogc3BlZWRNdWxGOwoKICAgICAgZm9yIChjb25zdCBzIG9mIHRoaXMuc3RhcnMpIHsKICAgICAgICBzLnogLT0gc3BlZWQ7CiAgICAgICAgd2hpbGUgKHMueiA8IDEpIHsKICAgICAgICAgIHMueiArPSAxMDAwOwogICAgICAgICAgcy54ID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogcy56OwogICAgICAgICAgcy55ID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogcy56OwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgbGV0IHdhcnBzcGVlZDsKICBsZXQgbGFzdFRpbWUgPSBudWxsOwoKICBjb25zdCB0aWNrID0gdGltZSA9PiB7CiAgICB3YXJwc3BlZWQuZHJhdyhsYXN0VGltZSA9PT0gbnVsbCA/IDEgOiB0aW1lIC0gbGFzdFRpbWUpOwogICAgbGFzdFRpbWUgPSB0aW1lOwogICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spOwogIH07CgogIG9ubWVzc2FnZSA9ICh7IGRhdGE6IHsgY2FudmFzLCBjb25maWcgfSB9KSA9PiB7CiAgICBpZiAoY2FudmFzICE9PSB1bmRlZmluZWQpIHsKICAgICAgbGFzdFRpbWUgPSBudWxsOwogICAgICB3YXJwc3BlZWQgPSBuZXcgV2FycFNwZWVkKGNhbnZhcyk7CiAgICB9CgogICAgaWYgKGNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHdhcnBzcGVlZC51cGRhdGUoY29uZmlnKTsKICAgICAgaWYgKGxhc3RUaW1lID09PSBudWxsKSB7CiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spOwogICAgICB9CiAgICB9CiAgfTsKCn0oKSk7Cgo=', 'data:application/json;charset=utf-8;base64,', false);
/* eslint-enable */

AFRAME.registerComponent("warpspeed", {
  schema: {
    resolution: {
      type: "number",
      default: 512,
    },
    speed: {
      type: "number",
      default: 0.7,
    },
    targetSpeed: {
      type: "number",
      default: 0.7, // value of data.speed
    },
    speedAdjFactor: {
      type: "number",
      default: 0.03, // min: 0, max: 1
    },
    density: {
      type: "number",
      default: 0.7, // min: >0
    },
    useCircles: {
      type: "boolean",
      default: true,
    },
    depthAlpha: {
      type: "boolean",
      default: true,
    },
    warpEffect: {
      type: "boolean",
      default: true,
    },
    warpEffectLength: {
      type: "number",
      default: 5, // min: 0
    },
    starScale: {
      type: "number",
      default: 3, // min: >0
    },
    backgroundColor: {
      type: "color",
      default: "#100a1a",
    },
    starColor: {
      type: "color",
      default: "#ffffff",
    },
    useWorker: {
      type: "boolean",
      default: false
    }
  },

  update(oldData) {

    if (oldData.useWorker !== this.data.useWorker) {

      if (oldData.useWorker !== undefined) {
        if (oldData.useWorker) {
          this.worker.terminate();
          delete this.worker;
        } else {
          delete this.warpspeed;
        }
        this.canvasMap.dispose();
        delete this.canvas;
      }

      this.canvas = document.createElement("canvas");
      this.canvas.width = this.data.resolution;
      this.canvas.height = this.data.resolution;

      this.canvasMap = new THREE.Texture(this.canvas);
      this.el.getObject3D("mesh").material.map = this.canvasMap;

      if (this.data.useWorker) {
        const offscreen = this.canvas.transferControlToOffscreen();
        this.worker = new WorkerFactory();
        this.worker.postMessage({ canvas: offscreen }, [offscreen]);
      } else {
        this.warpspeed = new WarpSpeed(this.canvas);
      }
    }

    if (this.data.useWorker) {
      this.worker.postMessage({ config: this.data });
    } else {
      this.warpspeed.update(this.data);
    }
  },

  tick(_time, timeDelta) {
    if (!this.data.useWorker) {
      this.warpspeed.draw(timeDelta);
    }
    // this.material.map.needsUpdate = true
    this.canvasMap.needsUpdate = true;
  },
});
