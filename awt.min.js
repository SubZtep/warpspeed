const I=()=>1e3*(Math.random()-.5);class g{constructor(I,g,U){this.x=I,this.y=g,this.z=U,this.size=.5+Math.random()}}class U{config={};stars=[];constructor(I){this.ctx=I.getContext("2d")}update(U){let s=!1;for(const[C,Q]of Object.entries(U))if(this.config[C]!==Q){switch(C){case"width":case"height":case"starScale":s=!0;break;case"density":const U=Math.ceil(1e3*Q),C=U-this.stars.length;if(C>0)for(let U=0;U<C;U++){const U=new g(I(),I(),1e3*Math.random());this.stars.push(U)}else this.stars.length=U;break;case"starColor":const c="#"===(F=Q).charAt(0)&&7===F.length?{r:parseInt(F.substr(1,2),16),g:parseInt(F.substr(3,2),16),b:parseInt(F.substr(5,2),16)}:{r:255,g:255,b:255};this.starR=c.r,this.starG=c.g,this.starB=c.b}this.config[C]=Q}var F;s&&(this.size=Math.max(this.config.width,this.config.height)/(10/this.config.starScale),this.maxLineWidth=this.size/30)}draw(I){this.move(I);const g=this.config.width,U=this.config.height;this.size=Math.max(g,U)/(10/this.config.starScale);const s=this.ctx;s.fillStyle=this.config.backgroundColor,s.fillRect(0,0,g,U);for(const I of this.stars){const F=I.x/I.z,C=I.y/I.z;if(!this.config.warpEffect&&(F<-.5||F>.5||C<-.5||C>.5))continue;const Q=I.size*this.size/I.z;if(!(Q<.3)){if(this.config.depthAlpha){const g=(1e3-I.z)/1e3;s.fillStyle=`rgba(${this.starR}, ${this.starG}, ${this.starB}, ${g.toString()})`}else s.fillStyle=this.config.starColor;if(this.config.warpEffect){s.beginPath();const c=I.x/(I.z+this.config.warpEffectLength*this.config.speed),B=I.y/(I.z+this.config.warpEffectLength*this.config.speed);if(c<-.5||c>.5||B<-.5||B>.5)continue;s.moveTo(g*(F+.5)-Q/2,U*(C+.5)-Q/2),s.lineTo(g*(c+.5)-Q/2,U*(B+.5)-Q/2),s.lineWidth=Math.min(Q,this.maxLineWidth),s.lineCap=this.config.useCircles?"round":"butt",s.strokeStyle=s.fillStyle,s.stroke()}else this.config.useCircles?(s.beginPath(),s.arc(g*(F+.5)-Q/2,U*(C+.5)-Q/2,Q/2,0,2*Math.PI),s.fill()):s.fillRect(g*(F+.5)-Q/2,U*(C+.5)-Q/2,Q,Q)}}}move(I){const g=this.config.speed*(I/10);for(const I of this.stars)for(I.z-=g;I.z<1;)I.z+=1e3,I.x=(Math.random()-.5)*I.z,I.y=(Math.random()-.5)*I.z}}function s(I,g,U){var s=void 0===g?null:g,F=function(I,g){var U=atob(I);if(g){for(var s=new Uint8Array(U.length),F=0,C=U.length;F<C;++F)s[F]=U.charCodeAt(F);return String.fromCharCode.apply(null,new Uint16Array(s.buffer))}return U}(I,void 0!==U&&U),C=F.indexOf("\n",10)+1,Q=F.substring(C)+(s?"//# sourceMappingURL="+s:""),c=new Blob([Q],{type:"application/javascript"});return URL.createObjectURL(c)}var F,C,Q,c,B=(F="Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y29uc3QgdD0oKT0+MWUzKihNYXRoLnJhbmRvbSgpLS41KTtjbGFzcyBze2NvbnN0cnVjdG9yKHQscyxpKXt0aGlzLng9dCx0aGlzLnk9cyx0aGlzLno9aSx0aGlzLnNpemU9LjUrTWF0aC5yYW5kb20oKX19Y2xhc3MgaXtjb25maWc9e307c3RhcnM9W107Y29uc3RydWN0b3IodCl7dGhpcy5jdHg9dC5nZXRDb250ZXh0KCIyZCIpfXVwZGF0ZShpKXtsZXQgZT0hMTtmb3IoY29uc3RbbyxhXW9mIE9iamVjdC5lbnRyaWVzKGkpKWlmKHRoaXMuY29uZmlnW29dIT09YSl7c3dpdGNoKG8pe2Nhc2Uid2lkdGgiOmNhc2UiaGVpZ2h0IjpjYXNlInN0YXJTY2FsZSI6ZT0hMDticmVhaztjYXNlImRlbnNpdHkiOmNvbnN0IGk9TWF0aC5jZWlsKDFlMyphKSxvPWktdGhpcy5zdGFycy5sZW5ndGg7aWYobz4wKWZvcihsZXQgaT0wO2k8bztpKyspe2NvbnN0IGk9bmV3IHModCgpLHQoKSwxZTMqTWF0aC5yYW5kb20oKSk7dGhpcy5zdGFycy5wdXNoKGkpfWVsc2UgdGhpcy5zdGFycy5sZW5ndGg9aTticmVhaztjYXNlInN0YXJDb2xvciI6Y29uc3QgaD0iIyI9PT0obj1hKS5jaGFyQXQoMCkmJjc9PT1uLmxlbmd0aD97cjpwYXJzZUludChuLnN1YnN0cigxLDIpLDE2KSxnOnBhcnNlSW50KG4uc3Vic3RyKDMsMiksMTYpLGI6cGFyc2VJbnQobi5zdWJzdHIoNSwyKSwxNil9OntyOjI1NSxnOjI1NSxiOjI1NX07dGhpcy5zdGFyUj1oLnIsdGhpcy5zdGFyRz1oLmcsdGhpcy5zdGFyQj1oLmJ9dGhpcy5jb25maWdbb109YX12YXIgbjtlJiYodGhpcy5zaXplPU1hdGgubWF4KHRoaXMuY29uZmlnLndpZHRoLHRoaXMuY29uZmlnLmhlaWdodCkvKDEwL3RoaXMuY29uZmlnLnN0YXJTY2FsZSksdGhpcy5tYXhMaW5lV2lkdGg9dGhpcy5zaXplLzMwKX1kcmF3KHQpe3RoaXMubW92ZSh0KTtjb25zdCBzPXRoaXMuY29uZmlnLndpZHRoLGk9dGhpcy5jb25maWcuaGVpZ2h0O3RoaXMuc2l6ZT1NYXRoLm1heChzLGkpLygxMC90aGlzLmNvbmZpZy5zdGFyU2NhbGUpO2NvbnN0IGU9dGhpcy5jdHg7ZS5maWxsU3R5bGU9dGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yLGUuZmlsbFJlY3QoMCwwLHMsaSk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5zdGFycyl7Y29uc3Qgbj10LngvdC56LG89dC55L3QuejtpZighdGhpcy5jb25maWcud2FycEVmZmVjdCYmKG48LS41fHxuPi41fHxvPC0uNXx8bz4uNSkpY29udGludWU7Y29uc3QgYT10LnNpemUqdGhpcy5zaXplL3QuejtpZighKGE8LjMpKXtpZih0aGlzLmNvbmZpZy5kZXB0aEFscGhhKXtjb25zdCBzPSgxZTMtdC56KS8xZTM7ZS5maWxsU3R5bGU9YHJnYmEoJHt0aGlzLnN0YXJSfSwgJHt0aGlzLnN0YXJHfSwgJHt0aGlzLnN0YXJCfSwgJHtzLnRvU3RyaW5nKCl9KWB9ZWxzZSBlLmZpbGxTdHlsZT10aGlzLmNvbmZpZy5zdGFyQ29sb3I7aWYodGhpcy5jb25maWcud2FycEVmZmVjdCl7ZS5iZWdpblBhdGgoKTtjb25zdCBoPXQueC8odC56K3RoaXMuY29uZmlnLndhcnBFZmZlY3RMZW5ndGgqdGhpcy5jb25maWcuc3BlZWQpLGM9dC55Lyh0LnordGhpcy5jb25maWcud2FycEVmZmVjdExlbmd0aCp0aGlzLmNvbmZpZy5zcGVlZCk7aWYoaDwtLjV8fGg+LjV8fGM8LS41fHxjPi41KWNvbnRpbnVlO2UubW92ZVRvKHMqKG4rLjUpLWEvMixpKihvKy41KS1hLzIpLGUubGluZVRvKHMqKGgrLjUpLWEvMixpKihjKy41KS1hLzIpLGUubGluZVdpZHRoPU1hdGgubWluKGEsdGhpcy5tYXhMaW5lV2lkdGgpLGUubGluZUNhcD10aGlzLmNvbmZpZy51c2VDaXJjbGVzPyJyb3VuZCI6ImJ1dHQiLGUuc3Ryb2tlU3R5bGU9ZS5maWxsU3R5bGUsZS5zdHJva2UoKX1lbHNlIHRoaXMuY29uZmlnLnVzZUNpcmNsZXM/KGUuYmVnaW5QYXRoKCksZS5hcmMocyoobisuNSktYS8yLGkqKG8rLjUpLWEvMixhLzIsMCwyKk1hdGguUEkpLGUuZmlsbCgpKTplLmZpbGxSZWN0KHMqKG4rLjUpLWEvMixpKihvKy41KS1hLzIsYSxhKX19fW1vdmUodCl7Y29uc3Qgcz10aGlzLmNvbmZpZy5zcGVlZCoodC8xMCk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5zdGFycylmb3IodC56LT1zO3QuejwxOyl0LnorPTFlMyx0Lng9KE1hdGgucmFuZG9tKCktLjUpKnQueix0Lnk9KE1hdGgucmFuZG9tKCktLjUpKnQuen19bGV0IGUsbixvO2NvbnN0IGE9dD0+e298fChlLmRyYXcobnVsbD09PW4/MTp0LW4pLG49dCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYSkpfTtvbm1lc3NhZ2U9KHtkYXRhOntjYW52YXM6dCxjb25maWc6cyxwYXVzZTpofX0pPT57dm9pZCAwIT09dCYmKGU9bmV3IGkodCkpLHZvaWQgMCE9PXMmJmUudXBkYXRlKHMpLHZvaWQgMCE9PWgmJihvPWgsb3x8KG49bnVsbCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYSkpKX19KCk7Cgo=",C="data:application/json;charset=utf-8;base64,",Q=!1,function(I){return c=c||s(F,C,Q),new Worker(c,I)});AFRAME.registerComponent("warpspeed",{schema:{width:{type:"number",default:512},height:{type:"number",default:512},speed:{type:"number",default:.7},density:{type:"number",default:25.7},useCircles:{type:"boolean",default:!0},depthAlpha:{type:"boolean",default:!0},warpEffect:{type:"boolean",default:!0},warpEffectLength:{type:"number",default:5},starScale:{type:"number",default:3},backgroundColor:{type:"color",default:"#100a1a"},starColor:{type:"color",default:"#ffffff"},useWorker:{type:"boolean",default:!1}},update(I){(I.useWorker!==this.data.useWorker||I.width!==this.data.width||I.height!==this.data.height)&&(void 0!==I.useWorker&&this.destroyCanvasMap(),this.createCanvasMap(),this.initWarpspeed()),this.workerInUse()?this.worker.postMessage({config:this.data,pause:!this.isPlaying}):this.warpspeed.update(this.data)},initWarpspeed(){if(this.el.removeState("worker"),this.data.useWorker)try{const I=this.canvas.transferControlToOffscreen();return this.worker=new B,this.worker.postMessage({canvas:I},[I]),void this.el.addState("worker")}catch(I){console.error(I)}this.warpspeed=new U(this.canvas)},createCanvasMap(){this.canvas=document.createElement("canvas"),this.canvas.width=this.data.width,this.canvas.height=this.data.height,this.canvasMap=new THREE.Texture(this.canvas),this.el.getObject3D("mesh").material.map=this.canvasMap},destroyCanvasMap(){this.workerInUse()?(this.worker.terminate(),delete this.worker):delete this.warpspeed,this.canvasMap.dispose(),delete this.canvas},play(){this.workerInUse()&&this.worker.postMessage({pause:!1})},pause(){this.workerInUse()&&this.worker.postMessage({pause:!0})},workerInUse(){return this.el.is("worker")},tick(I,g){this.workerInUse()||this.warpspeed.draw(g),this.canvasMap.needsUpdate=!0}});
