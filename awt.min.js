class I{constructor(I,g,s){this.x=I,this.y=g,this.z=s,this.size=.5+Math.random()}}const g=()=>1e3*(Math.random()-.5);class s{config={};stars=[];starR=255;starG=255;starB=255;constructor(I){this.canvas=I,this.ctx=this.canvas.getContext("2d")}update(s){for(const[U,B]of Object.entries(s))if(this.config[U]!==B){switch(U){case"speed":case"targetSpeed":case"speedAdjFactor":this.speed=s.speed||this.config.speed;break;case"resolution":(s.starScale||this.config.starScale)&&(this.size=B/(10/(s.starScale||this.config.starScale)),this.maxLineWidth=this.size/30);break;case"starScale":(s.resolution||this.config.resolution)&&(this.size=(s.resolution||this.config.resolution)/(10/B),this.maxLineWidth=this.size/30);break;case"density":const U=Math.ceil(1e3*B),c=U-this.stars.length;if(c>0)for(let s=0;s<c;s++){const s=new I(g(),g(),1e3*Math.random());this.stars.push(s)}else this.stars.length=U;break;case"starColor":const C="#"===(F=B).charAt(0)&&7===F.length?{r:parseInt(F.substr(1,2),16),g:parseInt(F.substr(3,2),16),b:parseInt(F.substr(5,2),16)}:{r:255,g:255,b:255};this.starR=C.r,this.starG=C.g,this.starB=C.b}this.config[U]=B}var F}draw(I){this.move(I);const g=this.config.resolution,s=this.config.resolution;this.size=Math.max(g,s)/(10/this.config.starScale);const F=this.ctx;F.fillStyle=this.config.backgroundColor,F.fillRect(0,0,g,s);for(const I of this.stars){const U=I.x/I.z,B=I.y/I.z;if(!this.config.warpEffect&&(U<-.5||U>.5||B<-.5||B>.5))continue;const c=I.size*this.size/I.z;if(!(c<.3)){if(this.config.depthAlpha){const g=(1e3-I.z)/1e3;F.fillStyle=`rgba(${this.starR}, ${this.starG}, ${this.starB}, ${g.toString()})`}else F.fillStyle=this.config.starColor;if(this.config.warpEffect){F.beginPath();const C=I.x/(I.z+this.config.warpEffectLength*this.speed),Q=I.y/(I.z+this.config.warpEffectLength*this.speed);if(C<-.5||C>.5||Q<-.5||Q>.5)continue;F.moveTo(g*(U+.5)-c/2,s*(B+.5)-c/2),F.lineTo(g*(C+.5)-c/2,s*(Q+.5)-c/2),F.lineWidth=Math.min(c,this.maxLineWidth),F.lineCap=this.config.useCircles?"round":"butt",F.strokeStyle=F.fillStyle,F.stroke()}else this.config.useCircles?(F.beginPath(),F.arc(g*(U+.5)-c/2,s*(B+.5)-c/2,c/2,0,2*Math.PI),F.fill()):F.fillRect(g*(U+.5)-c/2,s*(B+.5)-c/2,c,c)}}}move(I){const g=I/10,s=Math.pow(this.config.speedAdjFactor,1/g);this.speed=this.config.targetSpeed*s+this.speed*(1-s),this.speed<0&&(this.speed=0);const F=this.speed*g;for(const I of this.stars)for(I.z-=F;I.z<1;)I.z+=1e3,I.x=(Math.random()-.5)*I.z,I.y=(Math.random()-.5)*I.z}}function F(I,g,s){var F=void 0===g?null:g,U=function(I,g){var s=atob(I);if(g){for(var F=new Uint8Array(s.length),U=0,B=s.length;U<B;++U)F[U]=s.charCodeAt(U);return String.fromCharCode.apply(null,new Uint16Array(F.buffer))}return s}(I,void 0!==s&&s),B=U.indexOf("\n",10)+1,c=U.substring(B)+(F?"//# sourceMappingURL="+F:""),C=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(C)}var U,B,c,C,Q=(U="Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgdHtjb25zdHJ1Y3Rvcih0LHMsaSl7dGhpcy54PXQsdGhpcy55PXMsdGhpcy56PWksdGhpcy5zaXplPS41K01hdGgucmFuZG9tKCl9fWNvbnN0IHM9KCk9PjFlMyooTWF0aC5yYW5kb20oKS0uNSk7Y2xhc3MgaXtjb25maWc9e307c3RhcnM9W107c3RhclI9MjU1O3N0YXJHPTI1NTtzdGFyQj0yNTU7Y29uc3RydWN0b3IodCl7dGhpcy5jYW52YXM9dCx0aGlzLmN0eD10aGlzLmNhbnZhcy5nZXRDb250ZXh0KCIyZCIpfXVwZGF0ZShpKXtmb3IoY29uc3RbYSxvXW9mIE9iamVjdC5lbnRyaWVzKGkpKWlmKHRoaXMuY29uZmlnW2FdIT09byl7c3dpdGNoKGEpe2Nhc2Uic3BlZWQiOmNhc2UidGFyZ2V0U3BlZWQiOmNhc2Uic3BlZWRBZGpGYWN0b3IiOnRoaXMuc3BlZWQ9aS5zcGVlZHx8dGhpcy5jb25maWcuc3BlZWQ7YnJlYWs7Y2FzZSJyZXNvbHV0aW9uIjooaS5zdGFyU2NhbGV8fHRoaXMuY29uZmlnLnN0YXJTY2FsZSkmJih0aGlzLnNpemU9by8oMTAvKGkuc3RhclNjYWxlfHx0aGlzLmNvbmZpZy5zdGFyU2NhbGUpKSx0aGlzLm1heExpbmVXaWR0aD10aGlzLnNpemUvMzApO2JyZWFrO2Nhc2Uic3RhclNjYWxlIjooaS5yZXNvbHV0aW9ufHx0aGlzLmNvbmZpZy5yZXNvbHV0aW9uKSYmKHRoaXMuc2l6ZT0oaS5yZXNvbHV0aW9ufHx0aGlzLmNvbmZpZy5yZXNvbHV0aW9uKS8oMTAvbyksdGhpcy5tYXhMaW5lV2lkdGg9dGhpcy5zaXplLzMwKTticmVhaztjYXNlImRlbnNpdHkiOmNvbnN0IGE9TWF0aC5jZWlsKDFlMypvKSxuPWEtdGhpcy5zdGFycy5sZW5ndGg7aWYobj4wKWZvcihsZXQgaT0wO2k8bjtpKyspe2NvbnN0IGk9bmV3IHQocygpLHMoKSwxZTMqTWF0aC5yYW5kb20oKSk7dGhpcy5zdGFycy5wdXNoKGkpfWVsc2UgdGhpcy5zdGFycy5sZW5ndGg9YTticmVhaztjYXNlInN0YXJDb2xvciI6Y29uc3Qgcj0iIyI9PT0oZT1vKS5jaGFyQXQoMCkmJjc9PT1lLmxlbmd0aD97cjpwYXJzZUludChlLnN1YnN0cigxLDIpLDE2KSxnOnBhcnNlSW50KGUuc3Vic3RyKDMsMiksMTYpLGI6cGFyc2VJbnQoZS5zdWJzdHIoNSwyKSwxNil9OntyOjI1NSxnOjI1NSxiOjI1NX07dGhpcy5zdGFyUj1yLnIsdGhpcy5zdGFyRz1yLmcsdGhpcy5zdGFyQj1yLmJ9dGhpcy5jb25maWdbYV09b312YXIgZX1kcmF3KHQpe3RoaXMubW92ZSh0KTtjb25zdCBzPXRoaXMuY29uZmlnLnJlc29sdXRpb24saT10aGlzLmNvbmZpZy5yZXNvbHV0aW9uO3RoaXMuc2l6ZT1NYXRoLm1heChzLGkpLygxMC90aGlzLmNvbmZpZy5zdGFyU2NhbGUpO2NvbnN0IGU9dGhpcy5jdHg7ZS5maWxsU3R5bGU9dGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yLGUuZmlsbFJlY3QoMCwwLHMsaSk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5zdGFycyl7Y29uc3QgYT10LngvdC56LG89dC55L3QuejtpZighdGhpcy5jb25maWcud2FycEVmZmVjdCYmKGE8LS41fHxhPi41fHxvPC0uNXx8bz4uNSkpY29udGludWU7Y29uc3Qgbj10LnNpemUqdGhpcy5zaXplL3QuejtpZighKG48LjMpKXtpZih0aGlzLmNvbmZpZy5kZXB0aEFscGhhKXtjb25zdCBzPSgxZTMtdC56KS8xZTM7ZS5maWxsU3R5bGU9YHJnYmEoJHt0aGlzLnN0YXJSfSwgJHt0aGlzLnN0YXJHfSwgJHt0aGlzLnN0YXJCfSwgJHtzLnRvU3RyaW5nKCl9KWB9ZWxzZSBlLmZpbGxTdHlsZT10aGlzLmNvbmZpZy5zdGFyQ29sb3I7aWYodGhpcy5jb25maWcud2FycEVmZmVjdCl7ZS5iZWdpblBhdGgoKTtjb25zdCByPXQueC8odC56K3RoaXMuY29uZmlnLndhcnBFZmZlY3RMZW5ndGgqdGhpcy5zcGVlZCksaD10LnkvKHQueit0aGlzLmNvbmZpZy53YXJwRWZmZWN0TGVuZ3RoKnRoaXMuc3BlZWQpO2lmKHI8LS41fHxyPi41fHxoPC0uNXx8aD4uNSljb250aW51ZTtlLm1vdmVUbyhzKihhKy41KS1uLzIsaSoobysuNSktbi8yKSxlLmxpbmVUbyhzKihyKy41KS1uLzIsaSooaCsuNSktbi8yKSxlLmxpbmVXaWR0aD1NYXRoLm1pbihuLHRoaXMubWF4TGluZVdpZHRoKSxlLmxpbmVDYXA9dGhpcy5jb25maWcudXNlQ2lyY2xlcz8icm91bmQiOiJidXR0IixlLnN0cm9rZVN0eWxlPWUuZmlsbFN0eWxlLGUuc3Ryb2tlKCl9ZWxzZSB0aGlzLmNvbmZpZy51c2VDaXJjbGVzPyhlLmJlZ2luUGF0aCgpLGUuYXJjKHMqKGErLjUpLW4vMixpKihvKy41KS1uLzIsbi8yLDAsMipNYXRoLlBJKSxlLmZpbGwoKSk6ZS5maWxsUmVjdChzKihhKy41KS1uLzIsaSoobysuNSktbi8yLG4sbil9fX1tb3ZlKHQpe2NvbnN0IHM9dC8xMCxpPU1hdGgucG93KHRoaXMuY29uZmlnLnNwZWVkQWRqRmFjdG9yLDEvcyk7dGhpcy5zcGVlZD10aGlzLmNvbmZpZy50YXJnZXRTcGVlZCppK3RoaXMuc3BlZWQqKDEtaSksdGhpcy5zcGVlZDwwJiYodGhpcy5zcGVlZD0wKTtjb25zdCBlPXRoaXMuc3BlZWQqcztmb3IoY29uc3QgdCBvZiB0aGlzLnN0YXJzKWZvcih0LnotPWU7dC56PDE7KXQueis9MWUzLHQueD0oTWF0aC5yYW5kb20oKS0uNSkqdC56LHQueT0oTWF0aC5yYW5kb20oKS0uNSkqdC56fX1sZXQgZSxhLG87Y29uc3Qgbj10PT57b3x8KGUuZHJhdyhudWxsPT09YT8xOnQtYSksYT10LHJlcXVlc3RBbmltYXRpb25GcmFtZShuKSl9O29ubWVzc2FnZT0oe2RhdGE6e2NhbnZhczp0LGNvbmZpZzpzLHBhdXNlOnJ9fSk9Pnt2b2lkIDAhPT10JiYoZT1uZXcgaSh0KSksdm9pZCAwIT09cyYmZS51cGRhdGUocyksdm9pZCAwIT09ciYmKG89cixvfHwoYT1udWxsLHJlcXVlc3RBbmltYXRpb25GcmFtZShuKSkpfX0oKTsKCg==",B="data:application/json;charset=utf-8;base64,",c=!1,function(I){return C=C||F(U,B,c),new Worker(C,I)});AFRAME.registerComponent("warpspeed",{schema:{resolution:{type:"number",default:512},speed:{type:"number",default:.7},targetSpeed:{type:"number",default:.7},speedAdjFactor:{type:"number",default:.03},density:{type:"number",default:.7},useCircles:{type:"boolean",default:!0},depthAlpha:{type:"boolean",default:!0},warpEffect:{type:"boolean",default:!0},warpEffectLength:{type:"number",default:5},starScale:{type:"number",default:3},backgroundColor:{type:"color",default:"#100a1a"},starColor:{type:"color",default:"#ffffff"},useWorker:{type:"boolean",default:!1}},update(I){if(I.useWorker!==this.data.useWorker)if(void 0!==I.useWorker&&(I.useWorker?(this.worker.terminate(),delete this.worker):delete this.warpspeed,this.canvasMap.dispose(),delete this.canvas),this.canvas=document.createElement("canvas"),this.canvas.width=this.data.resolution,this.canvas.height=this.data.resolution,this.canvasMap=new THREE.Texture(this.canvas),this.el.getObject3D("mesh").material.map=this.canvasMap,this.data.useWorker){const I=this.canvas.transferControlToOffscreen();this.worker=new Q,this.worker.postMessage({canvas:I},[I])}else this.warpspeed=new s(this.canvas);this.data.useWorker?this.worker.postMessage({config:this.data,pause:!this.isPlaying}):this.warpspeed.update(this.data)},play(){this.data.useWorker&&this.worker.postMessage({pause:!1})},pause(){this.data.useWorker&&this.worker.postMessage({pause:!0})},tick(I,g){this.data.useWorker||this.warpspeed.draw(g),this.canvasMap.needsUpdate=!0}});
